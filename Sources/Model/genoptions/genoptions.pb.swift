// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: genoptions.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Genoptions_FileCodeSegments {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var file: String = String()

  public var segments: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Genoptions_CodeContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var describe: String = String()

  public var labels: [String] = []

  public var content: [Genoptions_FileCodeSegments] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Genoptions_FileCodeSegments: @unchecked Sendable {}
extension Genoptions_CodeContext: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Extension support defined in genoptions.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_FieldOptions {

  public var Genoptions_fmt: String {
    get {return getExtensionValue(ext: Genoptions_Extensions_Fmt) ?? String()}
    set {setExtensionValue(ext: Genoptions_Extensions_Fmt, value: newValue)}
  }
  /// Returns true if extension `Genoptions_Extensions_Fmt`
  /// has been explicitly set.
  public var hasGenoptions_fmt: Bool {
    return hasExtensionValue(ext: Genoptions_Extensions_Fmt)
  }
  /// Clears the value of extension `Genoptions_Extensions_Fmt`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearGenoptions_fmt() {
    clearExtensionValue(ext: Genoptions_Extensions_Fmt)
  }
}

extension SwiftProtobuf.Google_Protobuf_MessageOptions {

  public var Genoptions_genHtmxTmpl: Bool {
    get {return getExtensionValue(ext: Genoptions_Extensions_genHtmxTmpl) ?? false}
    set {setExtensionValue(ext: Genoptions_Extensions_genHtmxTmpl, value: newValue)}
  }
  /// Returns true if extension `Genoptions_Extensions_genHtmxTmpl`
  /// has been explicitly set.
  public var hasGenoptions_genHtmxTmpl: Bool {
    return hasExtensionValue(ext: Genoptions_Extensions_genHtmxTmpl)
  }
  /// Clears the value of extension `Genoptions_Extensions_genHtmxTmpl`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearGenoptions_genHtmxTmpl() {
    clearExtensionValue(ext: Genoptions_Extensions_genHtmxTmpl)
  }

  public var Genoptions_htmxTmplTarget: String {
    get {return getExtensionValue(ext: Genoptions_Extensions_htmxTmplTarget) ?? String()}
    set {setExtensionValue(ext: Genoptions_Extensions_htmxTmplTarget, value: newValue)}
  }
  /// Returns true if extension `Genoptions_Extensions_htmxTmplTarget`
  /// has been explicitly set.
  public var hasGenoptions_htmxTmplTarget: Bool {
    return hasExtensionValue(ext: Genoptions_Extensions_htmxTmplTarget)
  }
  /// Clears the value of extension `Genoptions_Extensions_htmxTmplTarget`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearGenoptions_htmxTmplTarget() {
    clearExtensionValue(ext: Genoptions_Extensions_htmxTmplTarget)
  }

  public var Genoptions_genMongodbOpUtils: Bool {
    get {return getExtensionValue(ext: Genoptions_Extensions_genMongodbOpUtils) ?? false}
    set {setExtensionValue(ext: Genoptions_Extensions_genMongodbOpUtils, value: newValue)}
  }
  /// Returns true if extension `Genoptions_Extensions_genMongodbOpUtils`
  /// has been explicitly set.
  public var hasGenoptions_genMongodbOpUtils: Bool {
    return hasExtensionValue(ext: Genoptions_Extensions_genMongodbOpUtils)
  }
  /// Clears the value of extension `Genoptions_Extensions_genMongodbOpUtils`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearGenoptions_genMongodbOpUtils() {
    clearExtensionValue(ext: Genoptions_Extensions_genMongodbOpUtils)
  }
}

extension SwiftProtobuf.Google_Protobuf_MethodOptions {

  public var Genoptions_skipGenHTTPInterface: Bool {
    get {return getExtensionValue(ext: Genoptions_Extensions_skip_gen_http_interface) ?? false}
    set {setExtensionValue(ext: Genoptions_Extensions_skip_gen_http_interface, value: newValue)}
  }
  /// Returns true if extension `Genoptions_Extensions_skip_gen_http_interface`
  /// has been explicitly set.
  public var hasGenoptions_skipGenHTTPInterface: Bool {
    return hasExtensionValue(ext: Genoptions_Extensions_skip_gen_http_interface)
  }
  /// Clears the value of extension `Genoptions_Extensions_skip_gen_http_interface`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearGenoptions_skipGenHTTPInterface() {
    clearExtensionValue(ext: Genoptions_Extensions_skip_gen_http_interface)
  }
}

extension SwiftProtobuf.Google_Protobuf_ServiceOptions {

  public var Genoptions_skipGenHTTPService: Bool {
    get {return getExtensionValue(ext: Genoptions_Extensions_skip_gen_http_service) ?? false}
    set {setExtensionValue(ext: Genoptions_Extensions_skip_gen_http_service, value: newValue)}
  }
  /// Returns true if extension `Genoptions_Extensions_skip_gen_http_service`
  /// has been explicitly set.
  public var hasGenoptions_skipGenHTTPService: Bool {
    return hasExtensionValue(ext: Genoptions_Extensions_skip_gen_http_service)
  }
  /// Clears the value of extension `Genoptions_Extensions_skip_gen_http_service`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearGenoptions_skipGenHTTPService() {
    clearExtensionValue(ext: Genoptions_Extensions_skip_gen_http_service)
  }

}

// MARK: - File's ExtensionMap: Genoptions_Genoptions_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
public let Genoptions_Genoptions_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Genoptions_Extensions_genHtmxTmpl,
  Genoptions_Extensions_htmxTmplTarget,
  Genoptions_Extensions_genMongodbOpUtils,
  Genoptions_Extensions_Fmt,
  Genoptions_Extensions_skip_gen_http_interface,
  Genoptions_Extensions_skip_gen_http_service
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

public let Genoptions_Extensions_genHtmxTmpl = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 61001,
  fieldName: "genoptions.genHtmxTmpl"
)

public let Genoptions_Extensions_htmxTmplTarget = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 61002,
  fieldName: "genoptions.htmxTmplTarget"
)

public let Genoptions_Extensions_genMongodbOpUtils = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 61003,
  fieldName: "genoptions.genMongodbOpUtils"
)

public let Genoptions_Extensions_Fmt = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 62002,
  fieldName: "genoptions.Fmt"
)

public let Genoptions_Extensions_skip_gen_http_interface = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtobuf.Google_Protobuf_MethodOptions>(
  _protobuf_fieldNumber: 63001,
  fieldName: "genoptions.skip_gen_http_interface"
)

public let Genoptions_Extensions_skip_gen_http_service = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtobuf.Google_Protobuf_ServiceOptions>(
  _protobuf_fieldNumber: 74001,
  fieldName: "genoptions.skip_gen_http_service"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "genoptions"

extension Genoptions_FileCodeSegments: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FileCodeSegments"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "file"),
    2: .same(proto: "segments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.file) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.segments) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.file.isEmpty {
      try visitor.visitSingularStringField(value: self.file, fieldNumber: 1)
    }
    if !self.segments.isEmpty {
      try visitor.visitRepeatedStringField(value: self.segments, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Genoptions_FileCodeSegments, rhs: Genoptions_FileCodeSegments) -> Bool {
    if lhs.file != rhs.file {return false}
    if lhs.segments != rhs.segments {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Genoptions_CodeContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CodeContext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "describe"),
    2: .same(proto: "labels"),
    3: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.describe) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.labels) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.content) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.describe.isEmpty {
      try visitor.visitSingularStringField(value: self.describe, fieldNumber: 1)
    }
    if !self.labels.isEmpty {
      try visitor.visitRepeatedStringField(value: self.labels, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.content, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Genoptions_CodeContext, rhs: Genoptions_CodeContext) -> Bool {
    if lhs.describe != rhs.describe {return false}
    if lhs.labels != rhs.labels {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
