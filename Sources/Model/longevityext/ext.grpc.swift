//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: ext.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// LongevityExt The service is an extension beyond Longevity's standard chat service.
///
/// Usage: instantiate `Longevityext_LongevityExtClient`, then call methods of this protocol to make API calls.
public protocol Longevityext_LongevityExtClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Longevityext_LongevityExtClientInterceptorFactoryProtocol? { get }

  func storeAppleWatchHealthData(
    _ request: Longevityext_StoreHealthDataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Longevityext_StoreHealthDataRequest, Longevityext_StoreHealthDataResponse>
}

extension Longevityext_LongevityExtClientProtocol {
  public var serviceName: String {
    return "longevityext.LongevityExt"
  }

  /// Unary call to StoreAppleWatchHealthData
  ///
  /// - Parameters:
  ///   - request: Request to send to StoreAppleWatchHealthData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func storeAppleWatchHealthData(
    _ request: Longevityext_StoreHealthDataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Longevityext_StoreHealthDataRequest, Longevityext_StoreHealthDataResponse> {
    return self.makeUnaryCall(
      path: Longevityext_LongevityExtClientMetadata.Methods.storeAppleWatchHealthData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAppleWatchHealthDataInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Longevityext_LongevityExtClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Longevityext_LongevityExtNIOClient")
public final class Longevityext_LongevityExtClient: Longevityext_LongevityExtClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Longevityext_LongevityExtClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Longevityext_LongevityExtClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the longevityext.LongevityExt service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Longevityext_LongevityExtClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Longevityext_LongevityExtNIOClient: Longevityext_LongevityExtClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Longevityext_LongevityExtClientInterceptorFactoryProtocol?

  /// Creates a client for the longevityext.LongevityExt service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Longevityext_LongevityExtClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// LongevityExt The service is an extension beyond Longevity's standard chat service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Longevityext_LongevityExtAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Longevityext_LongevityExtClientInterceptorFactoryProtocol? { get }

  func makeStoreAppleWatchHealthDataCall(
    _ request: Longevityext_StoreHealthDataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Longevityext_StoreHealthDataRequest, Longevityext_StoreHealthDataResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Longevityext_LongevityExtAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Longevityext_LongevityExtClientMetadata.serviceDescriptor
  }

  public var interceptors: Longevityext_LongevityExtClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeStoreAppleWatchHealthDataCall(
    _ request: Longevityext_StoreHealthDataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Longevityext_StoreHealthDataRequest, Longevityext_StoreHealthDataResponse> {
    return self.makeAsyncUnaryCall(
      path: Longevityext_LongevityExtClientMetadata.Methods.storeAppleWatchHealthData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAppleWatchHealthDataInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Longevityext_LongevityExtAsyncClientProtocol {
  public func storeAppleWatchHealthData(
    _ request: Longevityext_StoreHealthDataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Longevityext_StoreHealthDataResponse {
    return try await self.performAsyncUnaryCall(
      path: Longevityext_LongevityExtClientMetadata.Methods.storeAppleWatchHealthData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreAppleWatchHealthDataInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Longevityext_LongevityExtAsyncClient: Longevityext_LongevityExtAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Longevityext_LongevityExtClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Longevityext_LongevityExtClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Longevityext_LongevityExtClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'storeAppleWatchHealthData'.
  func makeStoreAppleWatchHealthDataInterceptors() -> [ClientInterceptor<Longevityext_StoreHealthDataRequest, Longevityext_StoreHealthDataResponse>]
}

public enum Longevityext_LongevityExtClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "LongevityExt",
    fullName: "longevityext.LongevityExt",
    methods: [
      Longevityext_LongevityExtClientMetadata.Methods.storeAppleWatchHealthData,
    ]
  )

  public enum Methods {
    public static let storeAppleWatchHealthData = GRPCMethodDescriptor(
      name: "StoreAppleWatchHealthData",
      path: "/longevityext.LongevityExt/StoreAppleWatchHealthData",
      type: GRPCCallType.unary
    )
  }
}

/// LongevityExt The service is an extension beyond Longevity's standard chat service.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Longevityext_LongevityExtProvider: CallHandlerProvider {
  var interceptors: Longevityext_LongevityExtServerInterceptorFactoryProtocol? { get }

  func storeAppleWatchHealthData(request: Longevityext_StoreHealthDataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Longevityext_StoreHealthDataResponse>
}

extension Longevityext_LongevityExtProvider {
  public var serviceName: Substring {
    return Longevityext_LongevityExtServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StoreAppleWatchHealthData":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Longevityext_StoreHealthDataRequest>(),
        responseSerializer: ProtobufSerializer<Longevityext_StoreHealthDataResponse>(),
        interceptors: self.interceptors?.makeStoreAppleWatchHealthDataInterceptors() ?? [],
        userFunction: self.storeAppleWatchHealthData(request:context:)
      )

    default:
      return nil
    }
  }
}

/// LongevityExt The service is an extension beyond Longevity's standard chat service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Longevityext_LongevityExtAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Longevityext_LongevityExtServerInterceptorFactoryProtocol? { get }

  func storeAppleWatchHealthData(
    request: Longevityext_StoreHealthDataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Longevityext_StoreHealthDataResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Longevityext_LongevityExtAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Longevityext_LongevityExtServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Longevityext_LongevityExtServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Longevityext_LongevityExtServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StoreAppleWatchHealthData":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Longevityext_StoreHealthDataRequest>(),
        responseSerializer: ProtobufSerializer<Longevityext_StoreHealthDataResponse>(),
        interceptors: self.interceptors?.makeStoreAppleWatchHealthDataInterceptors() ?? [],
        wrapping: { try await self.storeAppleWatchHealthData(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Longevityext_LongevityExtServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'storeAppleWatchHealthData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStoreAppleWatchHealthDataInterceptors() -> [ServerInterceptor<Longevityext_StoreHealthDataRequest, Longevityext_StoreHealthDataResponse>]
}

public enum Longevityext_LongevityExtServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "LongevityExt",
    fullName: "longevityext.LongevityExt",
    methods: [
      Longevityext_LongevityExtServerMetadata.Methods.storeAppleWatchHealthData,
    ]
  )

  public enum Methods {
    public static let storeAppleWatchHealthData = GRPCMethodDescriptor(
      name: "StoreAppleWatchHealthData",
      path: "/longevityext.LongevityExt/StoreAppleWatchHealthData",
      type: GRPCCallType.unary
    )
  }
}
