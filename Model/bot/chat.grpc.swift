//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: chat.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Bot_ChatClient`, then call methods of this protocol to make API calls.
public protocol Bot_ChatClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bot_ChatClientInterceptorFactoryProtocol? { get }

  func chat(
    _ request: Bot_ChatRequest,
    callOptions: CallOptions?,
    handler: @escaping (Bot_ChatResponse) -> Void
  ) -> ServerStreamingCall<Bot_ChatRequest, Bot_ChatResponse>

  func ping(
    _ request: Sys_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Sys_Empty, Sys_APIStatus>

  func chatPing(
    _ request: Bot_ChatPingRequest,
    callOptions: CallOptions?,
    handler: @escaping (Bot_ChatResponse) -> Void
  ) -> ServerStreamingCall<Bot_ChatPingRequest, Bot_ChatResponse>

  func feedBack(
    _ request: Bot_FeedBackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bot_FeedBackRequest, Sys_APIStatus>

  func getNotify(
    _ request: Sys_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Sys_Empty, Bot_GetNotifyResponse>

  func getNotifyByUID(
    _ request: Bot_GetNotifyByUIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bot_GetNotifyByUIDRequest, Bot_GetNotifyResponse>
}

extension Bot_ChatClientProtocol {
  public var serviceName: String {
    return "bot.Chat"
  }

  /// Server streaming call to Chat
  ///
  /// - Parameters:
  ///   - request: Request to send to Chat.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func chat(
    _ request: Bot_ChatRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Bot_ChatResponse) -> Void
  ) -> ServerStreamingCall<Bot_ChatRequest, Bot_ChatResponse> {
    return self.makeServerStreamingCall(
      path: Bot_ChatClientMetadata.Methods.chat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChatInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to Ping
  ///
  /// - Parameters:
  ///   - request: Request to send to Ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ping(
    _ request: Sys_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sys_Empty, Sys_APIStatus> {
    return self.makeUnaryCall(
      path: Bot_ChatClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  /// Server streaming call to ChatPing
  ///
  /// - Parameters:
  ///   - request: Request to send to ChatPing.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func chatPing(
    _ request: Bot_ChatPingRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Bot_ChatResponse) -> Void
  ) -> ServerStreamingCall<Bot_ChatPingRequest, Bot_ChatResponse> {
    return self.makeServerStreamingCall(
      path: Bot_ChatClientMetadata.Methods.chatPing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChatPingInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to FeedBack
  ///
  /// - Parameters:
  ///   - request: Request to send to FeedBack.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func feedBack(
    _ request: Bot_FeedBackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bot_FeedBackRequest, Sys_APIStatus> {
    return self.makeUnaryCall(
      path: Bot_ChatClientMetadata.Methods.feedBack.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeedBackInterceptors() ?? []
    )
  }

  /// Unary call to GetNotify
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNotify.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getNotify(
    _ request: Sys_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sys_Empty, Bot_GetNotifyResponse> {
    return self.makeUnaryCall(
      path: Bot_ChatClientMetadata.Methods.getNotify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNotifyInterceptors() ?? []
    )
  }

  /// Unary call to GetNotifyByUID
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNotifyByUID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getNotifyByUID(
    _ request: Bot_GetNotifyByUIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bot_GetNotifyByUIDRequest, Bot_GetNotifyResponse> {
    return self.makeUnaryCall(
      path: Bot_ChatClientMetadata.Methods.getNotifyByUID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNotifyByUIDInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Bot_ChatClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Bot_ChatNIOClient")
public final class Bot_ChatClient: Bot_ChatClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Bot_ChatClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Bot_ChatClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the bot.Chat service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bot_ChatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Bot_ChatNIOClient: Bot_ChatClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bot_ChatClientInterceptorFactoryProtocol?

  /// Creates a client for the bot.Chat service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bot_ChatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Bot_ChatAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Bot_ChatClientInterceptorFactoryProtocol? { get }

  func makeChatCall(
    _ request: Bot_ChatRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Bot_ChatRequest, Bot_ChatResponse>

  func makePingCall(
    _ request: Sys_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sys_Empty, Sys_APIStatus>

  func makeChatPingCall(
    _ request: Bot_ChatPingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Bot_ChatPingRequest, Bot_ChatResponse>

  func makeFeedBackCall(
    _ request: Bot_FeedBackRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bot_FeedBackRequest, Sys_APIStatus>

  func makeGetNotifyCall(
    _ request: Sys_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Sys_Empty, Bot_GetNotifyResponse>

  func makeGetNotifyByUidCall(
    _ request: Bot_GetNotifyByUIDRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bot_GetNotifyByUIDRequest, Bot_GetNotifyResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bot_ChatAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Bot_ChatClientMetadata.serviceDescriptor
  }

  public var interceptors: Bot_ChatClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeChatCall(
    _ request: Bot_ChatRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Bot_ChatRequest, Bot_ChatResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Bot_ChatClientMetadata.Methods.chat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChatInterceptors() ?? []
    )
  }

  public func makePingCall(
    _ request: Sys_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sys_Empty, Sys_APIStatus> {
    return self.makeAsyncUnaryCall(
      path: Bot_ChatClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  public func makeChatPingCall(
    _ request: Bot_ChatPingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Bot_ChatPingRequest, Bot_ChatResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Bot_ChatClientMetadata.Methods.chatPing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChatPingInterceptors() ?? []
    )
  }

  public func makeFeedBackCall(
    _ request: Bot_FeedBackRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bot_FeedBackRequest, Sys_APIStatus> {
    return self.makeAsyncUnaryCall(
      path: Bot_ChatClientMetadata.Methods.feedBack.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeedBackInterceptors() ?? []
    )
  }

  public func makeGetNotifyCall(
    _ request: Sys_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Sys_Empty, Bot_GetNotifyResponse> {
    return self.makeAsyncUnaryCall(
      path: Bot_ChatClientMetadata.Methods.getNotify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNotifyInterceptors() ?? []
    )
  }

  public func makeGetNotifyByUidCall(
    _ request: Bot_GetNotifyByUIDRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bot_GetNotifyByUIDRequest, Bot_GetNotifyResponse> {
    return self.makeAsyncUnaryCall(
      path: Bot_ChatClientMetadata.Methods.getNotifyByUID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNotifyByUIDInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bot_ChatAsyncClientProtocol {
  public func chat(
    _ request: Bot_ChatRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Bot_ChatResponse> {
    return self.performAsyncServerStreamingCall(
      path: Bot_ChatClientMetadata.Methods.chat.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChatInterceptors() ?? []
    )
  }

  public func ping(
    _ request: Sys_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Sys_APIStatus {
    return try await self.performAsyncUnaryCall(
      path: Bot_ChatClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }

  public func chatPing(
    _ request: Bot_ChatPingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Bot_ChatResponse> {
    return self.performAsyncServerStreamingCall(
      path: Bot_ChatClientMetadata.Methods.chatPing.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChatPingInterceptors() ?? []
    )
  }

  public func feedBack(
    _ request: Bot_FeedBackRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Sys_APIStatus {
    return try await self.performAsyncUnaryCall(
      path: Bot_ChatClientMetadata.Methods.feedBack.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeedBackInterceptors() ?? []
    )
  }

  public func getNotify(
    _ request: Sys_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Bot_GetNotifyResponse {
    return try await self.performAsyncUnaryCall(
      path: Bot_ChatClientMetadata.Methods.getNotify.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNotifyInterceptors() ?? []
    )
  }

  public func getNotifyByUID(
    _ request: Bot_GetNotifyByUIDRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Bot_GetNotifyResponse {
    return try await self.performAsyncUnaryCall(
      path: Bot_ChatClientMetadata.Methods.getNotifyByUID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNotifyByUIDInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Bot_ChatAsyncClient: Bot_ChatAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Bot_ChatClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bot_ChatClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Bot_ChatClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'chat'.
  func makeChatInterceptors() -> [ClientInterceptor<Bot_ChatRequest, Bot_ChatResponse>]

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makePingInterceptors() -> [ClientInterceptor<Sys_Empty, Sys_APIStatus>]

  /// - Returns: Interceptors to use when invoking 'chatPing'.
  func makeChatPingInterceptors() -> [ClientInterceptor<Bot_ChatPingRequest, Bot_ChatResponse>]

  /// - Returns: Interceptors to use when invoking 'feedBack'.
  func makeFeedBackInterceptors() -> [ClientInterceptor<Bot_FeedBackRequest, Sys_APIStatus>]

  /// - Returns: Interceptors to use when invoking 'getNotify'.
  func makeGetNotifyInterceptors() -> [ClientInterceptor<Sys_Empty, Bot_GetNotifyResponse>]

  /// - Returns: Interceptors to use when invoking 'getNotifyByUID'.
  func makeGetNotifyByUIDInterceptors() -> [ClientInterceptor<Bot_GetNotifyByUIDRequest, Bot_GetNotifyResponse>]
}

public enum Bot_ChatClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Chat",
    fullName: "bot.Chat",
    methods: [
      Bot_ChatClientMetadata.Methods.chat,
      Bot_ChatClientMetadata.Methods.ping,
      Bot_ChatClientMetadata.Methods.chatPing,
      Bot_ChatClientMetadata.Methods.feedBack,
      Bot_ChatClientMetadata.Methods.getNotify,
      Bot_ChatClientMetadata.Methods.getNotifyByUID,
    ]
  )

  public enum Methods {
    public static let chat = GRPCMethodDescriptor(
      name: "Chat",
      path: "/bot.Chat/Chat",
      type: GRPCCallType.serverStreaming
    )

    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/bot.Chat/Ping",
      type: GRPCCallType.unary
    )

    public static let chatPing = GRPCMethodDescriptor(
      name: "ChatPing",
      path: "/bot.Chat/ChatPing",
      type: GRPCCallType.serverStreaming
    )

    public static let feedBack = GRPCMethodDescriptor(
      name: "FeedBack",
      path: "/bot.Chat/FeedBack",
      type: GRPCCallType.unary
    )

    public static let getNotify = GRPCMethodDescriptor(
      name: "GetNotify",
      path: "/bot.Chat/GetNotify",
      type: GRPCCallType.unary
    )

    public static let getNotifyByUID = GRPCMethodDescriptor(
      name: "GetNotifyByUID",
      path: "/bot.Chat/GetNotifyByUID",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Bot_ChatProvider: CallHandlerProvider {
  var interceptors: Bot_ChatServerInterceptorFactoryProtocol? { get }

  func chat(request: Bot_ChatRequest, context: StreamingResponseCallContext<Bot_ChatResponse>) -> EventLoopFuture<GRPCStatus>

  func ping(request: Sys_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Sys_APIStatus>

  func chatPing(request: Bot_ChatPingRequest, context: StreamingResponseCallContext<Bot_ChatResponse>) -> EventLoopFuture<GRPCStatus>

  func feedBack(request: Bot_FeedBackRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sys_APIStatus>

  func getNotify(request: Sys_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Bot_GetNotifyResponse>

  func getNotifyByUID(request: Bot_GetNotifyByUIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bot_GetNotifyResponse>
}

extension Bot_ChatProvider {
  public var serviceName: Substring {
    return Bot_ChatServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Chat":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bot_ChatRequest>(),
        responseSerializer: ProtobufSerializer<Bot_ChatResponse>(),
        interceptors: self.interceptors?.makeChatInterceptors() ?? [],
        userFunction: self.chat(request:context:)
      )

    case "Ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sys_Empty>(),
        responseSerializer: ProtobufSerializer<Sys_APIStatus>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    case "ChatPing":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bot_ChatPingRequest>(),
        responseSerializer: ProtobufSerializer<Bot_ChatResponse>(),
        interceptors: self.interceptors?.makeChatPingInterceptors() ?? [],
        userFunction: self.chatPing(request:context:)
      )

    case "FeedBack":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bot_FeedBackRequest>(),
        responseSerializer: ProtobufSerializer<Sys_APIStatus>(),
        interceptors: self.interceptors?.makeFeedBackInterceptors() ?? [],
        userFunction: self.feedBack(request:context:)
      )

    case "GetNotify":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sys_Empty>(),
        responseSerializer: ProtobufSerializer<Bot_GetNotifyResponse>(),
        interceptors: self.interceptors?.makeGetNotifyInterceptors() ?? [],
        userFunction: self.getNotify(request:context:)
      )

    case "GetNotifyByUID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bot_GetNotifyByUIDRequest>(),
        responseSerializer: ProtobufSerializer<Bot_GetNotifyResponse>(),
        interceptors: self.interceptors?.makeGetNotifyByUIDInterceptors() ?? [],
        userFunction: self.getNotifyByUID(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Bot_ChatAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Bot_ChatServerInterceptorFactoryProtocol? { get }

  func chat(
    request: Bot_ChatRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Bot_ChatResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func ping(
    request: Sys_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sys_APIStatus

  func chatPing(
    request: Bot_ChatPingRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Bot_ChatResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func feedBack(
    request: Bot_FeedBackRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Sys_APIStatus

  func getNotify(
    request: Sys_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bot_GetNotifyResponse

  func getNotifyByUID(
    request: Bot_GetNotifyByUIDRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bot_GetNotifyResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bot_ChatAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Bot_ChatServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Bot_ChatServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Bot_ChatServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Chat":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bot_ChatRequest>(),
        responseSerializer: ProtobufSerializer<Bot_ChatResponse>(),
        interceptors: self.interceptors?.makeChatInterceptors() ?? [],
        wrapping: { try await self.chat(request: $0, responseStream: $1, context: $2) }
      )

    case "Ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sys_Empty>(),
        responseSerializer: ProtobufSerializer<Sys_APIStatus>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        wrapping: { try await self.ping(request: $0, context: $1) }
      )

    case "ChatPing":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bot_ChatPingRequest>(),
        responseSerializer: ProtobufSerializer<Bot_ChatResponse>(),
        interceptors: self.interceptors?.makeChatPingInterceptors() ?? [],
        wrapping: { try await self.chatPing(request: $0, responseStream: $1, context: $2) }
      )

    case "FeedBack":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bot_FeedBackRequest>(),
        responseSerializer: ProtobufSerializer<Sys_APIStatus>(),
        interceptors: self.interceptors?.makeFeedBackInterceptors() ?? [],
        wrapping: { try await self.feedBack(request: $0, context: $1) }
      )

    case "GetNotify":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sys_Empty>(),
        responseSerializer: ProtobufSerializer<Bot_GetNotifyResponse>(),
        interceptors: self.interceptors?.makeGetNotifyInterceptors() ?? [],
        wrapping: { try await self.getNotify(request: $0, context: $1) }
      )

    case "GetNotifyByUID":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bot_GetNotifyByUIDRequest>(),
        responseSerializer: ProtobufSerializer<Bot_GetNotifyResponse>(),
        interceptors: self.interceptors?.makeGetNotifyByUIDInterceptors() ?? [],
        wrapping: { try await self.getNotifyByUID(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Bot_ChatServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'chat'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChatInterceptors() -> [ServerInterceptor<Bot_ChatRequest, Bot_ChatResponse>]

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingInterceptors() -> [ServerInterceptor<Sys_Empty, Sys_APIStatus>]

  /// - Returns: Interceptors to use when handling 'chatPing'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChatPingInterceptors() -> [ServerInterceptor<Bot_ChatPingRequest, Bot_ChatResponse>]

  /// - Returns: Interceptors to use when handling 'feedBack'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeedBackInterceptors() -> [ServerInterceptor<Bot_FeedBackRequest, Sys_APIStatus>]

  /// - Returns: Interceptors to use when handling 'getNotify'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetNotifyInterceptors() -> [ServerInterceptor<Sys_Empty, Bot_GetNotifyResponse>]

  /// - Returns: Interceptors to use when handling 'getNotifyByUID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetNotifyByUIDInterceptors() -> [ServerInterceptor<Bot_GetNotifyByUIDRequest, Bot_GetNotifyResponse>]
}

public enum Bot_ChatServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Chat",
    fullName: "bot.Chat",
    methods: [
      Bot_ChatServerMetadata.Methods.chat,
      Bot_ChatServerMetadata.Methods.ping,
      Bot_ChatServerMetadata.Methods.chatPing,
      Bot_ChatServerMetadata.Methods.feedBack,
      Bot_ChatServerMetadata.Methods.getNotify,
      Bot_ChatServerMetadata.Methods.getNotifyByUID,
    ]
  )

  public enum Methods {
    public static let chat = GRPCMethodDescriptor(
      name: "Chat",
      path: "/bot.Chat/Chat",
      type: GRPCCallType.serverStreaming
    )

    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/bot.Chat/Ping",
      type: GRPCCallType.unary
    )

    public static let chatPing = GRPCMethodDescriptor(
      name: "ChatPing",
      path: "/bot.Chat/ChatPing",
      type: GRPCCallType.serverStreaming
    )

    public static let feedBack = GRPCMethodDescriptor(
      name: "FeedBack",
      path: "/bot.Chat/FeedBack",
      type: GRPCCallType.unary
    )

    public static let getNotify = GRPCMethodDescriptor(
      name: "GetNotify",
      path: "/bot.Chat/GetNotify",
      type: GRPCCallType.unary
    )

    public static let getNotifyByUID = GRPCMethodDescriptor(
      name: "GetNotifyByUID",
      path: "/bot.Chat/GetNotifyByUID",
      type: GRPCCallType.unary
    )
  }
}
